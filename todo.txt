List of things to do on the hearts game:	

4) Investigate the apparent bias for order of Hearts players
	-> There should be no bias at all, all spots should perform equally well

3) Check that everything is performing as expected, and if it does not, ask Michael why it might not be.
	-> Meant to give you good answers when not many tricks are left

-------------------------------------------------------------------------------

AFTER FIRST METHOD TESTING:
Since the end of the first implementation is approaching, we have to consider what implementation will be implemented next. After some testing / discussion with Michael Albert, coding for the second implementation should begin.

-------------------------------------------------------------------------------

IDEAS FOR SECOND IMPLEMENTATION:

1) Currently, one MCTS is drawn and at each node a simulate play method is completed, each with a different random set of cards.
	-> Instead of having one tree, have multiple
	-> The tree assigns hands at the start, then traverses
	-> Caluclate the best trees as opposed to best nodes

2) Implement the UCT algorithm for the Select method.

3) Improve the DoubleDummy playout with more advanced logic
	-> E.g. play highest card unless winning trick
	-> Maybe try to get rid of one suit first

4) Add an option for the DoubleDummy simulation to have preset players as the logic
	-> Make modular

-------------------------------------------------------------------------------

IDEAS FOR THIRD IMPLEMENTATION:

1) Introduce more hard and soft information
	-> e.g. card counting and prediction

-------------------------------------------------------------------------------

SOME NOTES:

-------------------------------------------------------------------------------

IMPLEMENTATION 0: Current improvement over random 3-4%

SELECT METHOD:

Currently, the select method works in a very naive fashion.
For each node, we calculate the average score of that node,
and then we subtract this from 13 to get X. We then add
X + 1 of the node to an array.

Once we have done this for all nodes, we randomly select from
this array. This is a very simple approach for biasing nodes
with a low average score.

EXPANSION METHOD:

Creates child nodes based on the card that can be played at the node.
	-> Represents a PLAY, not the whole trick

SIMULATE METHOD:

Upon reaching a node to begin a random simulation...
	-> Remove previously played cards from hand
	-> Randomly remove the equivalent number of opponents cards from remaining deck
	-> Randomly deal hands to the opponents
	-> Begin a "DoubleDumy" playout under these conditions
		-> DoubleDummy very naive, based on some simple rules
		-> Will try avoid trick if Hearts, otherwise win
		-> Does not support half made tricks
		-> How significant will improvements be on this?
	-> Simple algorithm - if no Hearts, play highest card, else lowest
	-> Record results

BACKPROPAGATE METHOD:

Basic backprop, adding score and visit count to previous nodes.

-------------------------------------------------------------------------------

IMPLEMENTATION 1: Current improvement over random 9-10%

SELECT METHOD:

EXPANSION METHOD:

SIMULATE METHOD:

Number of improvements to the DoubleDummy playouts:
	-> Randomised the start player (when no current trick passed) rather than assuming the player would start
	-> Added support for halfway through trick

BACKPROPAGATE METHOD:

-------------------------------------------------------------------------------

MISC NOTES / OBSERVATIONS:

* Had to randomise the start player for low trick games
	-> It seems that the start player has a disadvantage, assumed to be
	   because other players could not follow suit.

* Simply improving the DoubleDummy playout method had a huge improvement over performance,
  suggesting that a great deal of the MCTS capability relies on the DoubleDummy method itself.
